Scala Notes - Adding to GitHub...
-------------------



var myVar : String = "Steve";
    myVar = "Shane";

val myVar : String = "Shane";
//--  val is immutable - can't change

Variable Data Types
--------------------------------------------------------------------------------------
    The type of a variable is specified after the variable name and before equals sign.
    You can define any type of Scala variable by mentioning its data type as follows:

var or val VariableName : DataType = [Initial Value]


    If you do not assign any initial value to a variable, then it is valid as follows:

var myVar :Int;
val myVal :String;



Variable Type Inference
---------------------------
    When you assign an initial value to a variable, the Scala compiler can figure out
    the type of the variable based on the value assigned to it. This is called variable
    type inference. Therefore, you could write these variable declarations like this:

var myVar = 10;
val myVal = "Hello, Scala!";

    Here, by default, myVar will be Int type and myVal will become String type variable.


Variable Scope
===================
Variables in Scala can have three different scopes depending on the place where they are being used.
They can exist as fields, as method parameters and as local variables. Below are the details
about each type of scope.

Fields
---------
Fields are variables that belong to an object. The fields are accessible from inside
every method in the object. Fields can also be accessible outside the object depending on what
access modifiers the field is declared with. Object fields can be both mutable and immutable
types and can be defined using either var or val.

Method Parameters
------------------
Method parameters are variables, which are used to pass the value inside a method,
 when the method is called. Method parameters are only accessible from inside the method
  but the objects passed in may be accessible from the outside, if you have a reference to the
   object from outside the method. Method parameters are always mutable and defined by val keyword.

Local Variables
-------------------
Local variables are variables declared inside a method. Local variables are only accessible
from inside the method, but the objects you create may escape the method if you return them
from the method. Local variables can be both mutable and immutable types and can be defined
using either var or val.



Extending a Class
=======================
You can extend a base Scala class and you can design an inherited class in the same way you do it in Java
(use extends key word), but there are two restrictions: method overriding requires the override keyword,
and only the primary constructor can pass parameters to the base constructor. Let us extend our above class
and add one more class method.



Singleton Objects
===================
Scala is more object-oriented than Java because in Scala, we cannot have static members.
Instead, Scala has singleton objects. A singleton is a class that can have only one instance, i.e., Object.
You create singleton using the keyword object instead of class keyword. Since you can't instantiate a singleton object,
you can't pass parameters to the primary constructor. You already have seen all the examples using singleton objects
where you called Scala's main method.


If / Else
=============
var x = 30;
if( x < 20 ){
println("This is if statement");
}else{
println("This is else statement");
}


If / Else / Else
=======================
var x = 30;
if( x == 10 ){
    println("Value of X is 10");
}else if( x == 20 ){
    println("Value of X is 20");
}else if( x == 30 ){
    println("Value of X is 30");
}else{
    println("This is else statement");
}
}
}


While LOOPS
- No values can be returned
- Loop varialbe needs to be mutable
- Value binding needs to be explicit
- Cannot be chained or composed
- Infrequently used due to clunky syntax



While Loop
================
while(condition){
statement(s);
}



Do-While Loop
==================
do{
statement(s);
}while( condition );

var a = 10;
// do loop execution
do{
 println( "Value of a: " + a );
 a = a + 1;
}while( a < 20 )
}


For Loop
=============
for( var x <- Range ){
statement(s);
}

var a = 0;
// for loop execution with a range
for( a <- 1 to 10){
println( "Value of a: " + a );
}


You can use multiple ranges separated by semicolon (;) within for loop
and in that case loop will iterate through all the possible computations of the given ranges.
Following is an example of using just two ranges, you can use more than two ranges as well.


var a = 0;
var b = 0;
// for loop execution with a range
for( a <- 1 to 3; b <- 1 to 3){
println( "Value of a: " + a );
println( "Value of b: " + b );
}
}
}


Syntax: for Loop with Collections
The following syntax for loop with collections.
=====================================================
for( var x <- List ){
statement(s);
}


Loop with a Filter
=======================
var a = 0;
val numList = List(1,2,3,4,5,6,7,8,9,10);
// for loop execution with multiple filters
for( a <- numList
if a != 3; if a < 8 ){
println( "Value of a: " + a );
}

value of a: 1
value of a: 2
value of a: 4
value of a: 5
value of a: 6
value of a: 7



Syntax: for loop with yield
==============================
You can store return values from a “for” loop in a variable or can return through a function.
To do so, you prefix the body of the ‘for’ expression by the keyword "yield".
The following is the syntax.

var retVal = for{ var x <- List
if condition1; if condition2...
}yield x


var a = 0;
val numList = List(1,2,3,4,5,6,7,8,9,10);
// for loop execution with a yield
var retVal = for{ a <- numList
    if a != 3; if a < 8
}yield a
// Now print returned values using another loop.
for( a <- retVal){
println( "Value of a: " + a );
}



Loop Control Statements
==========================
Break Statement As such there is no built-in break statement available in Scala but if you are running Scala version 2.8,
then there is a way to use break statement.
When the break statement is encountered inside a loop, the loop is immediately terminated and program control
resumes at the next statement following the loop.



import scala.util.control._

object Demo {
def main(args: Array[String]) {
var a = 0;
val numList = List(1,2,3,4,5,6,7,8,9,10);
val loop = new Breaks;

loop.breakable {
for( a <- numList){
println( "Value of a: " + a );
if( a == 4 ){
loop.break;
}
}
}
println( "After the loop" );
}
}


Value of a: 1
Value of a: 2
Value of a: 3
Value of a: 4
After the loop


Scala has a "None" value,  just like Null in Java
val PI = if (denom != 0) {numer/denom} else {None}




Scala Functions
====================


Function Definitions A Scala function definition has the following form:

def functionName ([list of parameters]) : [return type] = {
function body
return [expr]
}

Here, return type could be any valid Scala data type and list of parameters will be a list of variables separated by comma
 and list of parameters and return type are optional. Very similar to Java, a return statement can be used
 along with an expression in case function returns a value. Following is the function
 which will add two integers and return their sum:



object add{
def addInt( a:Int, b:Int ) : Int = {
var sum:Int = 0
sum = a + b
return sum
}
}

Void is equal to Unit in Scala
====================================






Pattern Matching in Scala
=============================
- Pattern Matches are similiar to switch statements
- No Fall-thru
- No breaks
- Matches can be on type, value or condition


val dayOfWeek = "Monday"
val typeOfDay = dayOfWeek match {
    case "Monday" => "Manic Monday"
    case "Sunday" => "Sleep Sunday"
}

Pattern Gaurds and Or-Expressions
===================================
val typeOfDay = dayOWeek match{
    case "Monday" => "Manic Monday"
    case "Sunday" | "Saturday" => "Lazy Weekend"
    case "Tuesday" | "Wednesday" | "Thursday" | "Friday" => "Other working day"
}

Pattern Matching Catch-All
-------------------------------
val typeOfDay = dayOWeek match{
    case "Monday" => "Manic Monday"
    case "Sunday" | "Saturday" => "Lazy Weekend"
    case someOtherDay => {
        println(s"Some other day - neither Mon or Sunday, it's $someOtherDay")
        someOtherDay
    }
}



LEFT OFF ON PAGE 82 on my PDF that is on my Desktop












